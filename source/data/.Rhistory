for(propertyType in c('D', 'F', 'S', 'T')) {
for(year in 2003:2013) {
print(paste('Running', propertyType, year))
sqlpc <- paste('select PostCode, avg(Price) AvgPrice, count(*) Total from ', propertyType, year, ' group by PostCode', sep='')
#     sql_la <- paste('select PostCode, avg(Price) AvgPrice, count(*) Total from ', propertyType, year, ' group by PostCode', sep='')
sql_la <- paste('select * from ', propertyType, year, sep='')
tmpdfpc <- sqldf(sqlpc)
tmpdfwards <- sqldf(sql_la)
tmpdfpc$Year <- year
tmpdfpc$PostCodeProcessed <- gsub(' ', '', tmpdfpc$PostCode)
tmpdfwards$PostCodeProcessed <- gsub(' ', '', tmpdfwards$PostCode)
tmpdfpc <- tmpdfpc[tmpdfpc$PostCode != '',]
tmpdfwards <- tmpdfwards[tmpdfwards$PostCode != '',]
tmpdfpc <- sqldf('SELECT tmpdfpc.*, osward, WD13NM osname
FROM tmpdfpc, ons_postcode_to_ward_translation
WHERE PostCodeProcessed = pcd')
tmpdfwards <- sqldf('SELECT oslaua, WD13NM osname, avg(Price)average_price, count(*) total_sales
FROM tmpdfwards, ons_postcode_to_ward_translation
WHERE PostCodeProcessed = pcd
GROUP BY oslaua')
tmpdfwards$Year <- year
if (year == 2003) {
AV_DATA <- tmpdfpc
AV_DATA_W <- tmpdfwards
} else {
AV_DATA <- rbind(AV_DATA, tmpdfpc)
AV_DATA_W <- rbind(AV_DATA_W, tmpdfwards)
}
}
AV_DATA$PropertyType <- propertyType
AV_DATA_W$PropertyType <- propertyType
AV_DATA_ALL <- rbind(AV_DATA_ALL, AV_DATA)
AV_DATA_WARDS <- rbind(AV_DATA_WARDS, AV_DATA_W)
rm(tmpdfpc, tmpdfwards, AV_DATA, AV_DATA_W)
}
# get all totals per postcode per year
# group all by property type
AV_DATA_ALL <- data.frame()
AV_DATA_WARDS <- data.frame()
for(propertyType in c('D', 'F', 'S', 'T')) {
for(year in 2003:2013) {
print(paste('Running', propertyType, year))
sqlpc <- paste('select PostCode, avg(Price) AvgPrice, count(*) Total from ', propertyType, year, ' group by PostCode', sep='')
#     sql_la <- paste('select PostCode, avg(Price) AvgPrice, count(*) Total from ', propertyType, year, ' group by PostCode', sep='')
sql_la <- paste('select * from ', propertyType, year, sep='')
tmpdfpc <- sqldf(sqlpc)
tmpdfwards <- sqldf(sql_la)
tmpdfpc$Year <- year
tmpdfpc$PostCodeProcessed <- gsub(' ', '', tmpdfpc$PostCode)
tmpdfwards$PostCodeProcessed <- gsub(' ', '', tmpdfwards$PostCode)
tmpdfpc <- tmpdfpc[tmpdfpc$PostCode != '',]
tmpdfwards <- tmpdfwards[tmpdfwards$PostCode != '',]
tmpdfpc <- sqldf('SELECT tmpdfpc.*, osward, WD13NM osname
FROM tmpdfpc, ons_la_codes_names
WHERE PostCodeProcessed = pcd')
tmpdfwards <- sqldf('SELECT oslaua, WD13NM osname, avg(Price)average_price, count(*) total_sales
FROM tmpdfwards, ons_la_codes_names
WHERE PostCodeProcessed = pcd
GROUP BY oslaua')
tmpdfwards$Year <- year
if (year == 2003) {
AV_DATA <- tmpdfpc
AV_DATA_W <- tmpdfwards
} else {
AV_DATA <- rbind(AV_DATA, tmpdfpc)
AV_DATA_W <- rbind(AV_DATA_W, tmpdfwards)
}
}
AV_DATA$PropertyType <- propertyType
AV_DATA_W$PropertyType <- propertyType
AV_DATA_ALL <- rbind(AV_DATA_ALL, AV_DATA)
AV_DATA_WARDS <- rbind(AV_DATA_WARDS, AV_DATA_W)
rm(tmpdfpc, tmpdfwards, AV_DATA, AV_DATA_W)
}
# get all totals per postcode per year
# group all by property type
AV_DATA_ALL <- data.frame()
AV_DATA_WARDS <- data.frame()
for(propertyType in c('D', 'F', 'S', 'T')) {
for(year in 2003:2013) {
print(paste('Running', propertyType, year))
sqlpc <- paste('select PostCode, avg(Price) AvgPrice, count(*) Total from ', propertyType, year, ' group by PostCode', sep='')
#     sql_la <- paste('select PostCode, avg(Price) AvgPrice, count(*) Total from ', propertyType, year, ' group by PostCode', sep='')
sql_la <- paste('select * from ', propertyType, year, sep='')
tmpdfpc <- sqldf(sqlpc)
tmpdfwards <- sqldf(sql_la)
tmpdfpc$Year <- year
tmpdfpc$PostCodeProcessed <- gsub(' ', '', tmpdfpc$PostCode)
tmpdfwards$PostCodeProcessed <- gsub(' ', '', tmpdfwards$PostCode)
tmpdfpc <- tmpdfpc[tmpdfpc$PostCode != '',]
tmpdfwards <- tmpdfwards[tmpdfwards$PostCode != '',]
tmpdfpc <- sqldf('SELECT tmpdfpc.*, osward
FROM tmpdfpc, ons_la_codes_names
WHERE PostCodeProcessed = pcd')
tmpdfwards <- sqldf('SELECT oslaua, avg(Price)average_price, count(*) total_sales
FROM tmpdfwards, ons_la_codes_names
WHERE PostCodeProcessed = pcd
GROUP BY oslaua')
tmpdfwards$Year <- year
if (year == 2003) {
AV_DATA <- tmpdfpc
AV_DATA_W <- tmpdfwards
} else {
AV_DATA <- rbind(AV_DATA, tmpdfpc)
AV_DATA_W <- rbind(AV_DATA_W, tmpdfwards)
}
}
AV_DATA$PropertyType <- propertyType
AV_DATA_W$PropertyType <- propertyType
AV_DATA_ALL <- rbind(AV_DATA_ALL, AV_DATA)
AV_DATA_WARDS <- rbind(AV_DATA_WARDS, AV_DATA_W)
rm(tmpdfpc, tmpdfwards, AV_DATA, AV_DATA_W)
}
breakbyyear <- sqldf('select Year, count(*) from AV_DATA_WARDS group by Year')
breakbyyear
View(AV_DATA_WARDS)
AV_DATA_WARDS[AV_DATA_WARDS$oslaua == 'E07000038',]
write.csv(AV_DATA_WARDS, 'geography/fulldata_with_la.csv')
AV_DATA_WARDS[AV_DATA_WARDS$oslaua == 'E05000027' && Year == 2012,]
AV_DATA_WARDS[AV_DATA_WARDS$oslaua == 'E05000027',]
AV_DATA_WARDS[AV_DATA_WARDS$oslaua == 'E07000027',]
AV_DATA_WARDS[AV_DATA_WARDS$oslaua == 'E14000862',]
AV_DATA_WARDS[AV_DATA_WARDS$oslaua == 'E07000049',]
View(`D2004`)
rm(list=ls())
# source - http://data.gov.uk/dataset/crime_statistics
setwd('/Users/mpinir02/Documents/mpini/github/dataviz/crime_stats/data')
datafiles <- list.files(pattern='*.csv')
update_columns <- function (df) {
colnames(df) <- gsub('\\.', '_', names(df))
return(df)
}
getsubset <- function (df, filters) {
return(df[,filters])
}
datafiles
crimestatsla <- update_columns(read.csv(datafiles[1]))
# crimestatspa <- update_columns(read.csv(datafiles[2]))
filter_list <- c('X12_months_ending', 'Local_authority', 'ONS_LA_code', 'Police_force_area', 'ONS_PFA_code', 'Offence', 'Rolling_year_total_number_of_offences')
crimestatsla <- getsubset(crimestatsla, filter_list)
View(crimestatsla)
colnames(crimestatsla) <- c('date', 'la_name', 'la_code', 'pfa_name', 'pfa_code', 'offence', 'rolling_total')
# subset sussex only data
hastings <- crimestatsla[crimestatsla$la_name == 'Hastings',]
boxplot(hastings$rolling_total~hastings$offence)
sqldf('select count(distinct Local_authority) from crimestatsla')
library(sqldf)
sqldf('select count(distinct Local_authority) from crimestatsla')
sqldf('select count(distinct la_name) from crimestatsla')
sqldf('select count(distinct pfa_name) from crimestatsla')
View(hastings)
hastings[hastings$offence == 'Homicide',]
hastings[hastings$offence == 'Public order offences',]
# source - http://data.gov.uk/dataset/crown-prosecution-service-case-outcomes-by-principal-offence-category-data
# http://www.cps.gov.uk/data/case_outcomes/september_2012/principal_offence_category_september_2012.csv
setwd('/Users/mpinir02/Documents/mpini/github/dataviz/cps_principal_offence/data')
base_df <- data.frame()
for( file in list.files()) {
file_name <- gsub('principal_offence_category', 'poc', gsub('.csv', '', file))
# get data and assign to dataframe variable
dataframe <- read.csv(file)
# remove dots column names and replace with _ for readability
colnames(dataframe) <- gsub('\\.', '_', colnames(dataframe))
dataframe$publish_date <- gsub('poc_', '', file_name)
base_df <- rbind(base_df, dataframe)
# remove .csv extension from the file name
# shorten the name to poc
# use processed filename as variable name
# assign it the value of dataframe
assign(file_name , dataframe)
}
setwd('/Users/mpinir02/Documents/mpini/github/dataviz/cps_principal_offence/data')
base_df <- data.frame()
for( file in list.files()) {
file_name <- gsub('principal_offence_category', 'poc', gsub('.csv', '', file))
# get data and assign to dataframe variable
dataframe <- read.csv(file)
# remove dots column names and replace with _ for readability
colnames(dataframe) <- gsub('\\.', '_', colnames(dataframe))
dataframe$publish_date <- gsub('poc_', '', file_name)
base_df <- rbind(base_df, dataframe)
# remove .csv extension from the file name
# shorten the name to poc
# use processed filename as variable name
# assign it the value of dataframe
assign(file_name , dataframe)
rm(list=ls())
}
unique(hastings$offence)
library(XLConnect)
library(sqldf)
weekno <- 'week18'
setwd(paste('/Users/mpinir02/Sites/news/special/2013/newsspec_6185/tools/data/', weekno, sep=''))
projectFiles <- list.files(pattern='*.xls*')
# @TODO - halt execution of code on error
if (length(projectFiles) != 2) stop(paste('Expecting exactly 2 data files but have identified', length(projectFiles), 'data files'))
# load workbooks
for(file in projectFiles) {
variableName <- 'ae_performance_wb'
if (substring(file, 1, 5) == 'Daily') variableName <- 'dailysitrep'
assign(variableName, loadWorkbook(file))
}
# get indicator data from given worksheet
getkpiData <- function (worksheetName) {
kpiData <- readWorksheet(dailysitrep, sheet = worksheetName)
return(kpiData[17:173,])
}
characterToNumeric <- function (x) { return(as.integer(x)) }
nhs.filter <- function (df, filters) df[,filters]
#ambulances data
ambulances <- getkpiData('Ambulances queuing')
colnames(ambulances) <- c("a", "b", "code", "name", "e", "f", "g", "h", "i")
ambulances$e <- characterToNumeric(ambulances$e)
ambulances$f <- characterToNumeric(ambulances$f)
ambulances$g <- characterToNumeric(ambulances$g)
ambulances$h <- characterToNumeric(ambulances$h)
ambulances$i <- characterToNumeric(ambulances$i)
ambulances$ambulances_queuing <- rowSums(ambulances[,5:9])
ambulances <- nhs.filter(ambulances, c('code', 'ambulances_queuing'))
#Cancelled operations data
cancelled_operations <- getkpiData("Cancelled operations")
colnames(cancelled_operations) <- c("a", "b", "code", "name", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s")
# cancelled_operations <- sqldf("SELECT code, name, g, j, m, p, s FROM cancelled_operations")
cancelled_operations <- nhs.filter(cancelled_operations, c('code', 'name', 'g', 'j', 'm', 'p', 's'))
cancelled_operations$g <- characterToNumeric(cancelled_operations$g)
cancelled_operations$j <- characterToNumeric(cancelled_operations$j)
cancelled_operations$m <- characterToNumeric(cancelled_operations$m)
cancelled_operations$p <- characterToNumeric(cancelled_operations$p)
cancelled_operations$s <- characterToNumeric(cancelled_operations$s)
cancelled_operations$cancelled_operations <- rowSums(cancelled_operations[,3:7], na.rm = TRUE)
cancelled_operations <- nhs.filter(cancelled_operations, c('code', 'name', 'cancelled_operations'))
#Delayed transfers of care
dtoc <- getkpiData("Delayed transfers of care")
colnames(dtoc) <- c("a", "b", "code", "name", "e", "f", "g", "h", "i")
dtoc <- nhs.filter(dtoc, c('code', 'e', 'f', 'g', 'h', 'i'))
dtoc$e <- characterToNumeric(dtoc$e)
dtoc$f <- characterToNumeric(dtoc$f)
dtoc$g <- characterToNumeric(dtoc$g)
dtoc$h <- characterToNumeric(dtoc$h)
dtoc$i <- characterToNumeric(dtoc$i)
dtoc$dtoc <- rowSums(dtoc[,2:6], na.rm = TRUE)
dtoc <- nhs.filter(dtoc, c('code', 'dtoc'))
#D&V, Norovirus
norovirus <- getkpiData("D&V, Norovirus")
colnames(norovirus) <- c("a", "b", "code", "name", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n")
norovirus <- nhs.filter(norovirus, c('code', 'name', 'e', 'g', 'i', 'k', 'm'))
norovirus$e <- as.integer(norovirus$e)
norovirus$g <- as.integer(norovirus$g)
norovirus$i <- as.integer(norovirus$i)
norovirus$k <- as.integer(norovirus$k)
norovirus$m <- as.integer(norovirus$m)
norovirus$norovirus <- rowSums(norovirus[,3:7])
norovirus <- nhs.filter(norovirus, c('code', 'norovirus'))
# merge all data frames together
nhs_sitrep <- sqldf("SELECT *
FROM ambulances NATURAL JOIN cancelled_operations NATURAL JOIN dtoc NATURAL JOIN norovirus
WHERE ambulances_queuing <> 'NA' AND code <> '-'")
nhs_sitrep <- nhs.filter(nhs_sitrep, c('code', 'name', 'ambulances_queuing', 'cancelled_operations',  'dtoc', 'norovirus'))
# load A&E Performance data set
# preprocessing - ensure no comma separator for numbers
ae_performance <- readWorksheet(ae_performance_wb, sheet = "A&E Data")
ae_performance <- ae_performance[18:268,]
colnames(ae_performance) <- c("a", "b",
"perf_code",
"perf_name",
"attendances_total",
"f", "g", "h",
"attendance_over4hrs", "j", "k",
"percent_seen_under4hrs", "m",
"admission_total", "o", "p", "q", "decision_admission_4to12hrs", "s")
ae_performance <- sqldf("SELECT perf_code,
perf_name,
attendances_total,
attendance_over4hrs,
percent_seen_under4hrs,
admission_total,
decision_admission_4to12hrs
FROM ae_performance
WHERE attendances_total != 0")
ae_performance$attendances_total <- as.integer(gsub(',', '', ae_performance$attendances_total))
ae_performance$attendance_over4hrs <- as.integer(gsub(',', '', ae_performance$attendance_over4hrs))
ae_performance$admission_total <- as.integer(gsub(',', '', ae_performance$admission_total))
ae_performance$decision_admission_4to12hrs <- as.integer(gsub(',', '', ae_performance$decision_admission_4to12hrs))
nhs_data <- sqldf("SELECT *
FROM ae_performance, nhs_sitrep
WHERE charindex(code, perf_code) == 1")
nhs_data <- nhs.filter(nhs_data, c('code',
'name',
'attendances_total',
'attendance_over4hrs',
'percent_seen_under4hrs',
'admission_total',
'decision_admission_4to12hrs',
'ambulances_queuing',
'cancelled_operations',
'dtoc',
'norovirus'))
# get england totals from the 144 observations in nhs_data
nhs_data_england <- sqldf("SELECT avg(attendance_over4hrs) mean_attendance_over4hrs,
avg(decision_admission_4to12hrs) mean_decision_admission_4to12hrs,
sum(ambulances_queuing) ambulances_queuing,
avg(ambulances_queuing) mean_ambulances_queuing,
avg(cancelled_operations) mean_cancelled_operations,
avg(dtoc) mean_dtoc,
avg(norovirus) mean_norovirus
FROM nhs_data")
# write data to disk
write.csv(nhs_data, 'nhs_dataset.csv')
write.csv(nhs_data_england, 'nhs_dataset_england.csv')
# trust code column not required for the data download file
nhs_data$code <- NULL
# reassign column names for data download file available via /news/special/2013/newsspec_6544/inc/main.inc
colnames(nhs_data) <- c('Trust',
'Attendance total',
'More than 4 hour wait to be admitted',
'Seen under 4 hours (%)',
'Emergency Admissions',
'Trolley wait of 4-12 hours',
'Ambulances queuing',
'Cancelled elective operations',
'Beds blocked',
'Bed days lost to norovirus')
write.csv(nhs_data, paste('datafordownload', weekno, '.csv', sep=''))
#clean up environment
rm(list=ls())
withcodes <- read.csv('/Users/mpinir02/Downloads/ONSPD_MAY_2013_csv/Data/postcodes_smallerset.csv')
218/52
0.19*12
86251-85221
1030/86251
(1030/86251)*100
setwd("~/Sites/bbc/news/special/2014/newsspec_8945/source/data")
library(XLConnect)
library(rjson)
getDataFromSpreadsheet <- function (spreadsheetUrl, worksheet, columnsToDrop = NULL) {
dataset <- readWorksheet(loadWorkbook(spreadsheetUrl), sheet=worksheet, drop=columnsToDrop)
# assign column 1 as row names
rownames(dataset) <- dataset[,1]
# remove column 1
dataset <- dataset[,-1]
return(dataset)
}
updateEnglandData <- function (dataFileUrl, worksheet) {
mtdataset <- getDataFromSpreadsheet(dataFileUrl, worksheet)
# assign column names as expected from the js
colnames(mtdataset) <- c('authorityName', 'regionName', 'nursingLocal', 'residentialLocal', 'homeLocal', 'residentialRegion', 'residentialPrivate')
write(paste('define(', toJSON(as.data.frame(t(mtdataset))), ');', sep=''), 'dataset.js')
}
updateNationsData <- function (dataFileUrl, worksheet, drop = NULL) {
nationsDataset <- getDataFromSpreadsheet(dataFileUrl, worksheet, drop)
colnames(nationsDataset) <- c('nation', 'name', 'shortName', 'hcHourCost_14_15', 'hcHours', 'hcWeeklyCost', 'residential', 'nursing', 'eligibility', 'nursingNotes')
nationsDataset$hcHourCost_14_15 <- ifelse(substr(nationsDataset$hcHourCost_14_15, 1, 1) != '£' & nchar(nationsDataset$hcHourCost_14_15) > 2, paste('£', nationsDataset$hcHourCost_14_15, sep=''), nationsDataset$hcHourCost_14_15)
nationsDataset$hcWeeklyCost <- ifelse(substr(nationsDataset$hcWeeklyCost, 1, 1) != '£' & nchar(nationsDataset$hcWeeklyCost) > 2, paste('£', nationsDataset$hcWeeklyCost, sep=''), nationsDataset$hcWeeklyCost)
nationsDataset$residential <- ifelse(substr(nationsDataset$residential, 1, 1) != '£' & nchar(nationsDataset$residential) > 2, paste('£', nationsDataset$residential, sep=''), nationsDataset$residential)
nationsDataset$nursing <- ifelse(substr(nationsDataset$nursing, 1, 1) != '£' & nchar(nationsDataset$nursing) > 2, paste('£', nationsDataset$nursing, sep=''), nationsDataset$nursing)
write(paste('define(', toJSON(as.data.frame(t(nationsDataset))), ');', sep=''), 'nations_dataset.js')
}
# updateEnglandData('england_jan_2.xlsx', 'Unit Costs by CASSR')
updateNationsData('/Volumes/Teams/Journalists/John\ W/care\ calculator/data/foi_data_jan_2.xlsx', 'Sheet1', c(6,8,10,12,14))
# updateNationsData('/Volumes/Teams/Journalists/John\ W/care\ calculator/data/foi_hours_2columns_ref.xlsx', 'Sheet1', c(6,8,9,11,13,15))
setwd("~/Sites/bbc/news/special/2014/newsspec_8945/source/data")
library(XLConnect)
library(rjson)
getDataFromSpreadsheet <- function (spreadsheetUrl, worksheet, columnsToDrop = NULL) {
dataset <- readWorksheet(loadWorkbook(spreadsheetUrl), sheet=worksheet, drop=columnsToDrop)
# assign column 1 as row names
rownames(dataset) <- dataset[,1]
# remove column 1
dataset <- dataset[,-1]
return(dataset)
}
updateEnglandData <- function (dataFileUrl, worksheet) {
mtdataset <- getDataFromSpreadsheet(dataFileUrl, worksheet)
# assign column names as expected from the js
colnames(mtdataset) <- c('authorityName', 'regionName', 'nursingLocal', 'residentialLocal', 'homeLocal', 'residentialRegion', 'residentialPrivate')
write(paste('define(', toJSON(as.data.frame(t(mtdataset))), ');', sep=''), 'dataset.js')
}
updateNationsData <- function (dataFileUrl, worksheet, drop = NULL) {
nationsDataset <- getDataFromSpreadsheet(dataFileUrl, worksheet, drop)
colnames(nationsDataset) <- c('nation', 'name', 'shortName', 'hcHourCost_14_15', 'hcHours', 'hcWeeklyCost', 'residential', 'nursing', 'eligibility', 'nursingNotes')
nationsDataset$hcHourCost_14_15 <- ifelse(substr(nationsDataset$hcHourCost_14_15, 1, 1) != '£' & nchar(nationsDataset$hcHourCost_14_15) > 2, paste('£', nationsDataset$hcHourCost_14_15, sep=''), nationsDataset$hcHourCost_14_15)
nationsDataset$hcWeeklyCost <- ifelse(substr(nationsDataset$hcWeeklyCost, 1, 1) != '£' & nchar(nationsDataset$hcWeeklyCost) > 2, paste('£', nationsDataset$hcWeeklyCost, sep=''), nationsDataset$hcWeeklyCost)
nationsDataset$residential <- ifelse(substr(nationsDataset$residential, 1, 1) != '£' & nchar(nationsDataset$residential) > 2, paste('£', nationsDataset$residential, sep=''), nationsDataset$residential)
nationsDataset$nursing <- ifelse(substr(nationsDataset$nursing, 1, 1) != '£' & nchar(nationsDataset$nursing) > 2, paste('£', nationsDataset$nursing, sep=''), nationsDataset$nursing)
write(paste('define(', toJSON(as.data.frame(t(nationsDataset))), ');', sep=''), 'nations_dataset.js')
}
# updateEnglandData('england_jan_2.xlsx', 'Unit Costs by CASSR')
updateNationsData('/Volumes/Teams/Journalists/John\ W/care\ calculator/data/foi_data_jan_2.xlsx', 'Sheet1', c(6,8,10,12,14))
# updateNationsData('/Volumes/Teams/Journalists/John\ W/care\ calculator/data/foi_hours_2columns_ref.xlsx', 'Sheet1', c(6,8,9,11,13,15))
setwd("~/Sites/bbc/news/special/2014/newsspec_8945/source/data")
library(XLConnect)
library(rjson)
getDataFromSpreadsheet <- function (spreadsheetUrl, worksheet, columnsToDrop = NULL) {
dataset <- readWorksheet(loadWorkbook(spreadsheetUrl), sheet=worksheet, drop=columnsToDrop)
# assign column 1 as row names
rownames(dataset) <- dataset[,1]
# remove column 1
dataset <- dataset[,-1]
return(dataset)
}
updateEnglandData <- function (dataFileUrl, worksheet) {
mtdataset <- getDataFromSpreadsheet(dataFileUrl, worksheet)
# assign column names as expected from the js
colnames(mtdataset) <- c('authorityName', 'regionName', 'nursingLocal', 'residentialLocal', 'homeLocal', 'residentialRegion', 'residentialPrivate')
write(paste('define(', toJSON(as.data.frame(t(mtdataset))), ');', sep=''), 'dataset.js')
}
updateNationsData <- function (dataFileUrl, worksheet, drop = NULL) {
nationsDataset <- getDataFromSpreadsheet(dataFileUrl, worksheet, drop)
colnames(nationsDataset) <- c('nation', 'name', 'shortName', 'hcHourCost_14_15', 'hcHours', 'hcWeeklyCost', 'residential', 'nursing', 'eligibility', 'nursingNotes')
nationsDataset$hcHourCost_14_15 <- ifelse(substr(nationsDataset$hcHourCost_14_15, 1, 1) != '£' & nchar(nationsDataset$hcHourCost_14_15) > 2, paste('£', nationsDataset$hcHourCost_14_15, sep=''), nationsDataset$hcHourCost_14_15)
nationsDataset$hcWeeklyCost <- ifelse(substr(nationsDataset$hcWeeklyCost, 1, 1) != '£' & nchar(nationsDataset$hcWeeklyCost) > 2, paste('£', nationsDataset$hcWeeklyCost, sep=''), nationsDataset$hcWeeklyCost)
nationsDataset$residential <- ifelse(substr(nationsDataset$residential, 1, 1) != '£' & nchar(nationsDataset$residential) > 2, paste('£', nationsDataset$residential, sep=''), nationsDataset$residential)
nationsDataset$nursing <- ifelse(substr(nationsDataset$nursing, 1, 1) != '£' & nchar(nationsDataset$nursing) > 2, paste('£', nationsDataset$nursing, sep=''), nationsDataset$nursing)
write(paste('define(', toJSON(as.data.frame(t(nationsDataset))), ');', sep=''), 'nations_dataset.js')
}
# updateEnglandData('england_jan_2.xlsx', 'Unit Costs by CASSR')
updateNationsData('/Volumes/Teams/Journalists/John\ W/care\ calculator/data/foi_data_jan_2.xlsx', 'Sheet1', c(6,8,10,12,14))
# updateNationsData('/Volumes/Teams/Journalists/John\ W/care\ calculator/data/foi_hours_2columns_ref.xlsx', 'Sheet1', c(6,8,9,11,13,15))
updateNationsData('/Volumes/Teams/Journalists/John\ W/care\ calculator/data/foi_data_jan_2.xlsx', 'Sheet1', c(6,8,10,12,14))
# updateNationsData('/Volumes/Teams/Journalists/John\ W/care\ calculator/data/foi_hours_2columns_ref.xlsx', 'Sheet1', c(6,8,9,11,13,15))
updateNationsData('/Volumes/Teams/Journalists/John\ W/care\ calculator/data/foi_data_jan_2.xlsx', 'Sheet1', c(6,8,10,12,14))
setwd("~/Sites/bbc/news/special/2014/newsspec_8945/source/data")
library(XLConnect)
library(rjson)
getDataFromSpreadsheet <- function (spreadsheetUrl, worksheet, columnsToDrop = NULL) {
dataset <- readWorksheet(loadWorkbook(spreadsheetUrl), sheet=worksheet, drop=columnsToDrop)
# assign column 1 as row names
rownames(dataset) <- dataset[,1]
# remove column 1
dataset <- dataset[,-1]
return(dataset)
}
updateEnglandData <- function (dataFileUrl, worksheet) {
mtdataset <- getDataFromSpreadsheet(dataFileUrl, worksheet)
# assign column names as expected from the js
colnames(mtdataset) <- c('authorityName', 'regionName', 'nursingLocal', 'residentialLocal', 'homeLocal', 'residentialRegion', 'residentialPrivate')
write(paste('define(', toJSON(as.data.frame(t(mtdataset))), ');', sep=''), 'dataset.js')
}
updateNationsData <- function (dataFileUrl, worksheet, drop = NULL) {
nationsDataset <- getDataFromSpreadsheet(dataFileUrl, worksheet, drop)
colnames(nationsDataset) <- c('nation', 'name', 'shortName', 'hcHourCost_14_15', 'hcHours', 'hcWeeklyCost', 'residential', 'nursing', 'eligibility', 'nursingNotes')
nationsDataset$hcHourCost_14_15 <- ifelse(substr(nationsDataset$hcHourCost_14_15, 1, 1) != '£' & nchar(nationsDataset$hcHourCost_14_15) > 2, paste('£', nationsDataset$hcHourCost_14_15, sep=''), nationsDataset$hcHourCost_14_15)
nationsDataset$hcWeeklyCost <- ifelse(substr(nationsDataset$hcWeeklyCost, 1, 1) != '£' & nchar(nationsDataset$hcWeeklyCost) > 2, paste('£', nationsDataset$hcWeeklyCost, sep=''), nationsDataset$hcWeeklyCost)
nationsDataset$residential <- ifelse(substr(nationsDataset$residential, 1, 1) != '£' & nchar(nationsDataset$residential) > 2, paste('£', nationsDataset$residential, sep=''), nationsDataset$residential)
nationsDataset$nursing <- ifelse(substr(nationsDataset$nursing, 1, 1) != '£' & nchar(nationsDataset$nursing) > 2, paste('£', nationsDataset$nursing, sep=''), nationsDataset$nursing)
write(paste('define(', toJSON(as.data.frame(t(nationsDataset))), ');', sep=''), 'nations_dataset.js')
}
updateNationsData('/Volumes/Teams/Journalists/John\ W/care\ calculator/data/foi_data_jan_2.xlsx', 'Sheet1', c(6,8,10,12,14))
updateNationsData <- function (dataFileUrl, worksheet, drop = NULL) {
nationsDataset <- getDataFromSpreadsheet(dataFileUrl, worksheet, drop)
colnames(nationsDataset) <- c('nation', 'name', 'shortName', 'hcHourCost_14_15', 'hcHours', 'hcWeeklyCost', 'residential', 'nursing', 'eligibility', 'nursingNotes')
nationsDataset$hcHourCost_14_15 <- ifelse(substr(nationsDataset$hcHourCost_14_15, 1, 1) != '£' & nchar(nationsDataset$hcHourCost_14_15) > 2, paste('£', nationsDataset$hcHourCost_14_15, sep=''), nationsDataset$hcHourCost_14_15)
nationsDataset$hcWeeklyCost <- ifelse(substr(nationsDataset$hcWeeklyCost, 1, 1) != '£' & nchar(nationsDataset$hcWeeklyCost) > 2, paste('£', nationsDataset$hcWeeklyCost, sep=''), nationsDataset$hcWeeklyCost)
nationsDataset$residential <- ifelse(substr(nationsDataset$residential, 1, 1) != '£' & nchar(nationsDataset$residential) > 2, paste('£', nationsDataset$residential, sep=''), nationsDataset$residential)
nationsDataset$nursing <- ifelse(substr(nationsDataset$nursing, 1, 1) != '£' & nchar(nationsDataset$nursing) > 2, paste('£', nationsDataset$nursing, sep=''), nationsDataset$nursing)
write(paste('define(', toJSON(as.data.frame(t(nationsDataset))), ');', sep=''), 'nations_dataset.js')
View(nationsDataset)
}
updateNationsData('/Volumes/Teams/Journalists/John\ W/care\ calculator/data/foi_data_jan_2.xlsx', 'Sheet1', c(6,8,10,12,14))
updateNationsData('/Volumes/Teams/Journalists/John\ W/care\ calculator/data/foi_data_jan_2.xlsx', 'Sheet1', c(6,8,10,12,14))
updateNationsData('/Volumes/Teams/Journalists/John\ W/care\ calculator/data/foi_data_jan_2.xlsx', 'Sheet1', c(6,8,10,12,14))
grep('12', 1234, perl=TRUE)
grep('3', 1234, perl=TRUE)
grep('5', 1234, perl=TRUE)
ifelse(grep('5', 1234, perl=TRUE)==1,'yes', 'no')
ifelse(grep('2', 1234, perl=TRUE)==1,'yes', 'no')
ifelse(grep('4', 1234, perl=TRUE)==1,'yes', 'no')
ifelse(grep('6', 1234, perl=TRUE)==1,'yes', 'no')
ifelse(grep('6', 1234, perl=TRUE)==1,'yes')
ifelse(grep('6', 1234, perl=TRUE)!=1,'yes')
ifelse(grep('3', 1234, perl=TRUE)!=1,'yes')
ifelse(grep('3', 1234, perl=TRUE)!=1,'yes','no')
ifelse(grep('5', 1234, perl=TRUE) !=1,'yes','no')
ifelse(grep('5', 1234, perl=TRUE) ==1,'yes','no')
gsub('a','0','at8433')
gsub('a','0','at8433')
gsub('a','5','at8433')
gsub('a','5','£84.33')
gsub('.','5','£84.3')
gsub('\\.','5','£84.3')
gsub('\\.[1-9]','5','£84.3')
updateNationsData('/Volumes/Teams/Journalists/John\ W/care\ calculator/data/foi_data_jan_2.xlsx', 'Sheet1', c(6,8,10,12,14))
setwd("~/Sites/bbc/news/special/2014/newsspec_8945/source/data")
library(XLConnect)
library(rjson)
getDataFromSpreadsheet <- function (spreadsheetUrl, worksheet, columnsToDrop = NULL) {
dataset <- readWorksheet(loadWorkbook(spreadsheetUrl), sheet=worksheet, drop=columnsToDrop)
# assign column 1 as row names
rownames(dataset) <- dataset[,1]
# remove column 1
dataset <- dataset[,-1]
return(dataset)
}
updateEnglandData <- function (dataFileUrl, worksheet) {
mtdataset <- getDataFromSpreadsheet(dataFileUrl, worksheet)
# assign column names as expected from the js
colnames(mtdataset) <- c('authorityName', 'regionName', 'nursingLocal', 'residentialLocal', 'homeLocal', 'residentialRegion', 'residentialPrivate')
write(paste('define(', toJSON(as.data.frame(t(mtdataset))), ');', sep=''), 'dataset.js')
}
updateNationsData <- function (dataFileUrl, worksheet, drop = NULL) {
nationsDataset <- getDataFromSpreadsheet(dataFileUrl, worksheet, drop)
colnames(nationsDataset) <- c('nation', 'name', 'shortName', 'hcHourCost_14_15', 'hcHours', 'hcWeeklyCost', 'residential', 'nursing', 'eligibility', 'nursingNotes')
nationsDataset$hcHourCost_14_15 <- ifelse(substr(nationsDataset$hcHourCost_14_15, 1, 1) != '£' & nchar(nationsDataset$hcHourCost_14_15) > 2, paste('£', nationsDataset$hcHourCost_14_15, sep=''), nationsDataset$hcHourCost_14_15)
nationsDataset$hcWeeklyCost <- ifelse(substr(nationsDataset$hcWeeklyCost, 1, 1) != '£' & nchar(nationsDataset$hcWeeklyCost) > 2, paste('£', nationsDataset$hcWeeklyCost, sep=''), nationsDataset$hcWeeklyCost)
nationsDataset$residential <- ifelse(substr(nationsDataset$residential, 1, 1) != '£' & nchar(nationsDataset$residential) > 2, paste('£', nationsDataset$residential, sep=''), nationsDataset$residential)
nationsDataset$nursing <- ifelse(substr(nationsDataset$nursing, 1, 1) != '£' & nchar(nationsDataset$nursing) > 2, paste('£', nationsDataset$nursing, sep=''), nationsDataset$nursing)
write(paste('define(', toJSON(as.data.frame(t(nationsDataset))), ');', sep=''), 'nations_dataset.js')
View(nationsDataset)
}
# updateEnglandData('england_jan_2.xlsx', 'Unit Costs by CASSR')
updateNationsData('/Volumes/Teams/Journalists/John\ W/care\ calculator/data/foi_data_jan_2.xlsx', 'Sheet1', c(6,8,10,12,14))
# updateNationsData('/Volumes/Teams/Journalists/John\ W/care\ calculator/data/foi_hours_2columns_ref.xlsx', 'Sheet1', c(6,8,9,11,13,15))
